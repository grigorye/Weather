//
//  WeatherProviderImp.swift
//  WeatherApp/OpenWeatherMap
//
//  Created by Grigory Entin on 03/05/2018.
//  Copyright Â© 2018 Grigory Entin. All rights reserved.
//

import Result

extension OpenWeatherMap$ {
    
    struct WeatherProviderImp : WeatherProvider {
        
        var networking: Networking!
        
        init(networking: Networking) {
            self.networking = networking
        }
        
        func queryWeather(for canonicPredicate: WeatherLocationPredicate, completion: @escaping (Result<WeatherInfo, AnyError>) -> Void) {
            let locationPredicate = LocationPredicate(canonicPredicate)
            networking.queryWeather(for: locationPredicate) { (result) in
                switch result {
                case .failure(let error):
                    completion(.failure(AnyError(error)))
                    return
                case .success(let networkWeatherInfo):
                    let temperature = Measurement(value: networkWeatherInfo.main.temp, unit: UnitTemperature.celsius)
                    let weatherInfo = WeatherInfo(temperature: temperature)
                    completion(.success(weatherInfo))
                }
            }
        }
    }
}

extension OpenWeatherMap$$ /* *** AUTOGENERATED *** */ {
    typealias WeatherProviderImp = OpenWeatherMap$.WeatherProviderImp
}
